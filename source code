#include <iostream>
#include <vector>
#include <string>
int x = 0;
bool completed = false;


int is_occupied[9][9] = {};
int possibilities[9][9][9] = {};
bool same_horizontal_line(int row, std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			if (i != j) {
				if (board[row][i] == board[row][j]) {
					return true;
				}
				
				
			}
		}
	}
	return false;
}

bool is_r_valid(int row, std::vector<std::vector<int>> board) {
	bool seen[10] = { false };
	for (int i = 0; i < 9; i++) {
		int num = board[row][i];
		if (num != 0) {
			if (num < 1 || num>9 || seen[num]) {
				return false;
			}
			seen[num] = true;
		}
	}
	return true;
}

bool is_c_valid(int column, std::vector<std::vector<int>> board) {
	bool seen[10] = { false };
	for (int i = 0; i < 9; i++) {
		int num = board[i][column];
		if (num != 0) {
			if (num < 1 || num>9 || seen[num]) {
				return false;
			}
			seen[num] = true;
		}
	}	
	return true;
}

bool is_s_valid(int row, int column, std::vector<std::vector<int>> board) {
	bool seen[10] = { false };
	for (int i = row; i < row + 3; i++) {
		for (int j = column; j < column + 3; j++) {
			int num = board[i][j];
			if (num != 0) {
				if (num < 1 || num>9 || seen[num]) {
					return false;
				}
				seen[num] = true;
			}
		}	
	}
	return true;
}

bool is_valid(std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		if (!is_r_valid(i, board)) {
			return false;
		}
		if (!is_c_valid(i, board)) {
			return false;
		}
	}
	for (int j = 0; j < 3; j++) {
		for (int k = 0; k < 3; k++) {
			if (!is_s_valid(3 * j, 3 * k, board)) {
				return false;
			}
		}
	}
	return true;
}

bool same_vertical_line(int column, std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			if (i != j) {
				if (board[i][column] == board[j][column]) {
					return true;
				}
			}
		}
	}
	return false;
}

bool is_column_valid(int column, std::vector<std::vector<int>> board) {
	bool seen[10] = { false };
	for (int i = 0; i < 9; i++) {
		int num = board[i][column];
		if (num < 1 || num>9 || seen[num]||num==0) {
			return false;
		}
		seen[num] = true;
	}
	return true;
}

bool is_square_valid(int row, int column, std::vector<std::vector<int>> board) {
	bool seen[10] = { false };
	for (int i = row; i < row + 3; i++) {
		for (int j = column; j < column + 3; j++) {
			int num = board[i][j];
			if (num < 1 || num>9 || num == 0 || seen[num]) {
				return false;
			}
			seen[num] = true;
		}
	}
	return true;
}

bool check_completed(std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		if (!(
			(board[i][0] == 1 || board[i][1] == 1 || board[i][2] == 1 || board[i][3] == 1 || board[i][4] == 1 || board[i][5] == 1 || board[i][6] == 1 || board[i][7] == 1 || board[i][8] == 1)
			&& (board[i][0] == 2 || board[i][1] == 2 || board[i][2] == 2 || board[i][3] == 2 || board[i][4] == 2 || board[i][5] == 2 || board[i][6] == 2 || board[i][7] == 2 || board[i][8] == 2) 
			&& (board[i][0] == 3 || board[i][1] == 3 || board[i][2] == 3 || board[i][3] == 3 || board[i][4] == 3 || board[i][5] == 3 || board[i][6] == 3 || board[i][7] == 3 || board[i][8] == 3) 
			&& (board[i][0] == 4 || board[i][1] == 4 || board[i][2] == 4 || board[i][3] == 4 || board[i][4] == 4 || board[i][5] == 4 || board[i][6] == 4 || board[i][7] == 4 || board[i][8] == 4) 
			&& (board[i][0] == 5 || board[i][1] == 5 || board[i][2] == 5 || board[i][3] == 5 || board[i][4] == 5 || board[i][5] == 5 || board[i][6] == 5 || board[i][7] == 5 || board[i][8] == 5) 
			&& (board[i][0] == 6 || board[i][1] == 6 || board[i][2] == 6 || board[i][3] == 6 || board[i][4] == 6 || board[i][5] == 6 || board[i][6] == 6 || board[i][7] == 6 || board[i][8] == 6) 
			&& (board[i][0] == 7 || board[i][1] == 7 || board[i][2] == 7 || board[i][3] == 7 || board[i][4] == 7 || board[i][5] == 7 || board[i][6] == 7 || board[i][7] == 7 || board[i][8] == 7) 
			&& (board[i][0] == 8 || board[i][1] == 8 || board[i][2] == 8 || board[i][3] == 8 || board[i][4] == 8 || board[i][5] == 8 || board[i][6] == 8 || board[i][7] == 8 || board[i][8] == 8) 
			&& (board[i][0] == 9 || board[i][1] == 9 || board[i][2] == 9 || board[i][3] == 9 || board[i][4] == 9 || board[i][5] == 9 || board[i][6] == 9 || board[i][7] == 9 || board[i][8] == 9) 
			&& (!same_horizontal_line(i, board))
			)
			) {
			return false;
		}
		if (!(is_column_valid(i, board))) {
			return false;
		}


	}
	for (int j = 0; j < 3; j++) {
		for (int k = 0; k < 3; k++) {
			if (!is_square_valid(3 * j, 3 * k, board)) {
				return false;
			}
		}
	}
	return true;
}

void initialize_possibilities (int possibilities[9][9][9]) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			for (int k = 0; k < 9; k++) {
				possibilities[i][j][k] = k + 1;
			}
		}
	}
}

void remove_possibilities(int is_occupied[9][9], int possibilities[9][9][9], std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			if (is_occupied[i][j] != 1) {
				if (board[i][j] != 0) {
					is_occupied[i][j] = 1;
					int x = board[i][j];
					for (int k = 0; k < 9; k++) {
						if (k != x - 1) {
							possibilities[i][j][k] = 0;
						}

					}
					for (int m = 0; m < 9; m++) {
						if (m != j) {
							possibilities[i][m][x - 1] = 0;
						}

					}
					for (int y = 0; y < 9; y++) {
						if (y != i) {
							possibilities[y][j][x - 1] = 0;
						}
					}
					int row_id = i / 3;
					int column_id = j / 3;
					for (int n = row_id * 3; n < row_id * 3 + 3; n++) {
						for (int o = column_id * 3; o < column_id * 3 + 3; o++) {
							if (n != i && o != j)
								possibilities[n][o][x - 1] = 0;
						}
					}

				}
			}
		}
	}
}

void remove_possibilities2(int possibilities[9][9][9], std::vector<std::vector<int>> board) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			for (int k = 0; k < 9; k++) {
				if (board[i][j] == 0) {
					if (possibilities[i][j][k] != 0) {
						for (int m = 0; m < 9; m++) {
							if (m != j) {
								if (possibilities[i][m][k] != 0) {
									break;
								}
								if (j != 8) {
									if (m == 8) {
										for (int d = 0; d < 9; d++) {
											if (d != k) {
												possibilities[i][j][d] = 0;
											}
										}
									}
								}
								else if (j == 8) {
									if (m == 7) {
										for (int e = 0; e < 9; e++) {
											if (e != k) {
												possibilities[i][j][e] = 0;
											}
										}
									}
								}
							}

						}
						for (int y = 0; y < 9; y++) {
							if (y != i) {
								if (possibilities[y][j][k] != 0) {
									break;
								}
								if (i != 8) {
									if (y == 8) {
										for (int f = 0; f < 9; f++) {
											if (f != k) {
												possibilities[i][j][f] = 0;
											}
										}
									}
								}
								else if (i == 8) {
									if (y == 7) {
										for (int g = 0; g < 9; g++) {
											if (g != k) {
												possibilities[i][j][g] = 0;
											}
										}
									}
								}
							}
						}
						int row_id = i / 3;
						int column_id = j / 3;
						bool next_square = false;
						for (int n = row_id * 3; n < row_id * 3 + 3; n++) {
							for (int o = column_id * 3; o < column_id * 3 + 3; o++) {
								if (n != i || o != j)
									if (possibilities[n][o][k] != 0) {
										next_square = true;
										break;
									}
								if (i != (row_id * 3 + 2) && j != (column_id * 3 + 2)) {
									if ((n == row_id * 3 + 2) && (o == column_id * 3 + 2)) {
										for (int h = 0; h < 9; h++) {
											if (h != k) {
												possibilities[i][j][h] = 0;
											}
										}
									}
								}
								else if (i == (row_id * 3 + 2) && j == (column_id * 3 + 2)) {
									if ((n == row_id * 3 + 2) && (o == column_id * 3 + 1)) {
										for (int p = 0; p < 9; p++) {
											if (p != k) {
												possibilities[i][j][p] = 0;
											}
										}
									}
								}
								
							}
							if (next_square == true) {
								break;
							}
						}
					}
				}
			}
		}
	}
}

void display_possibilities(int possibilities[9][9][9], int is_occupied[9][9]) {
	for (int k = 0; k < 9; k++) {
		for (int l = 0; l < 9; l++) {
			std::cout << "row:" << k << " " << "column:" << l << std::endl;
			if (is_occupied[k][l] == 1) {
				std::cout << "occupied" << std::endl;
			}
			for (int m = 0; m < 9; m++) {
				std::cout << possibilities[k][l][m] << std::endl;
			}
		}
	}
}

void initialize_is_occupied(int is_occupied[9][9]) {
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			is_occupied[i][j] = 0;
		}
	}
}

bool initial_fill(int x, int possibilities[9][9][9], int is_occupied[9][9], std::vector<std::vector<int>>& board) {
	int fill = 0;
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			if (is_occupied[i][j] != 1) {
				int count = 0;
				for (int k = 0; k < 9; k++) {
					if (possibilities[i][j][k] != 0) {
						count++;
						x = possibilities[i][j][k];
					}
					if (count > 1) {
						break;
					}
					if (k == 8) {
						board[i][j] = x;
						fill++;
						break;

					}

				}
			}
		}
	}
	if (fill == 0) {
		return false;
	}
	else {
		return true;
	}
}

void generate_possibilities(int row, int column, int possibilities[9][9][9], std::vector<std::vector<int>> board, std::vector<std::vector<int>>& finalboard) {
	if (row == 8 && column == 8) {
		for (int i = 0; i < 9; i++) {
			if (possibilities[8][8][i] != 0) {
				board[8][8] = i + 1;
				if (is_valid(board)) {
					completed = true;
					finalboard = std::move(board);
					return;
				}
			}
		}
	}
	else {
		if (!completed) {
			if (column < 8) {
				for (int j = 0; j < 9; j++) {
					if (possibilities[row][column][j] != 0) {
						board[row][column] = j + 1;
						if (is_valid(board)) {
							generate_possibilities(row, column + 1, possibilities, board, finalboard);
						}
					}
				}
				
			}
			if (column == 8) {
				for (int k = 0; k < 9; k++) {
					if (possibilities[row][column][k] != 0) {
						board[row][column] = k + 1;
						if (is_valid(board)) {
							generate_possibilities(row+1, 0, possibilities, board, finalboard);
						}
					}
				}
			}
		}
		else if (completed){
			return;
		}
		
	}
	
}


int main() {
	while (true) {
		completed = false;
		std::vector<std::vector<int>> sudoku(9, std::vector<int>(9)); // Initialize 9x9 board with all 0s

		std::cout << "Enter the Sudoku puzzle numbers (use 0 for empty slots):" << std::endl;

		// Loop through each row of the board to receive user input
		for (int row = 0; row < 9; row++) {
			std::cout << "Enter line " << row + 1 << " without any spaces between the numbers" << std::endl;
			std::string line;
			std::getline(std::cin, line); // Read the entire line of input as a string

			// Convert each character in the string to an integer
			for (int col = 0; col < 9; col++) {
				sudoku[row][col] = line[col] - '0'; // Convert the character to an integer
			}
		}

		// Print the board to verify the input
		std::cout << "Unsolved Sudoku puzzle:" << std::endl;
		for (int row = 0; row < 9; row++) {
			for (int col = 0; col < 9; col++) {
				std::cout << sudoku[row][col] << " ";
			}
			std::cout << std::endl;
		}


		int solve;
		std::cout << "enter 1 to solve the puzzle" << std::endl;
		std::cin >> solve;
		if (solve == 1) {
			initialize_is_occupied(is_occupied);
			initialize_possibilities(possibilities);
			while (true) {
				while (true) {
					remove_possibilities(is_occupied, possibilities, sudoku);
					bool a = initial_fill(x, possibilities, is_occupied, sudoku);
					if (a == false) {
						break;
					}
				}
				remove_possibilities2(possibilities, sudoku);
				bool b = initial_fill(x, possibilities, is_occupied, sudoku);
				if (b == false) {
					break;
				}

			}
			if (!check_completed(sudoku)) {
				generate_possibilities(0, 0, possibilities, sudoku, sudoku);
			}
			std::cout << "solved sudoku" << std::endl;
			for (int i = 0; i < 9; i++) {
				std::cout << std::endl;
				for (int j = 0; j < 9; j++) {
					std::cout << sudoku[i][j]<<" ";
				}
			}
			std::cout<<std::endl;
		}
	}

	return 0;
}
